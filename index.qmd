---
#title: "`r params$athlete` ACL Rehabilitation Hub"
format:
  dashboard:
    orientation: columns
    #scrolling: true
    theme: default
    css: styles.css
class: no-footer
editor: visual
execute: 
  echo: false
  warning: false
params:
  athlete: "Frank Reynolds"
---

```{=html}
<style>
/* Hide the site footer only on this page */
html body footer.footer { 
  display: none !important; 
}
</style>
```

```{r}
#| label: setup
#| message: false

source("Global.R")
source("plot_functions.R")
source("Themes.R")

Jumps <- recent_five(params$athlete, "CMJ")

```

## Sidebar {.sidebar}

### `r params$athlete`

![](images/Frank.png)

##### ACL Rehabilitation

<i class="fa-solid fa-calendar-day"></i> **Day:** `{r} days` <i class="fa-solid fa-calendar-week"></i> **Week:** `{r} week`

<i class="fa-solid fa-bars-progress"></i> **Phase:** 2 <br> {{< fa solid dumbbell size=1x >}} *Strength & NM Control* <br> <i class="fa-solid fa-battery-three-quarters"></i> **Phase Progress:** 80%

<i class="fa-solid fa-briefcase-medical"></i> **Injury:** `{r} Rehab_Info$primary_injury` <br> <i class="bi bi-person-arms-up"></i> **Limb:** `{r} Rehab_Info$limb` <br> <i class="fa-solid fa-calendar-day"></i> **Date of Surgery:** `{r} surgery_date` <br> <i class="fa-solid fa-file-medical"></i> **Type of Surgery:** `{r} Rehab_Info$type_of_surgery`

```{r}

# Fictional progress: Phase 1 complete; Phase 2 partial; others not started
progress <- tibble::tibble(
  Phase = 1:5,
  done  = c(20, 8, 0, 0, 0),
  total = c(20,20,20,20,20)
) %>%
  mutate(
    Progress = paste0(done, "/", total),
    Percent  = done / total
  ) %>%
  select(Phase, Progress, Percent)

gt(progress) |>
  tab_header(title = md("**Progress by Phase**")) |>
  cols_label(
    Phase   = "Phase",
    Progress= "Completion",
    Percent = "Percent"
  ) |>
  fmt_percent(columns = Percent, decimals = 0) |>
  cols_align(align = "left", columns = Phase) |>
  cols_align(align = "center", columns = c(Progress, Percent)) |>
  # Color ONLY 100% cells in columns 2 and 3
  tab_style(
    style = list(cell_fill(color = "#e6f4ea"),
                 cell_text(color = "#1e7e34", weight = "700")),
    locations = cells_body(
      columns = c(Phase, Progress, Percent),
      rows = Percent == 1
    )
  ) |>
  tab_options(
    data_row.padding = px(6),
    table_body.hlines.style = "solid",
    table_body.hlines.width = px(1)
  )
```

## Column {width = "33%"}

::: {.card .border-0 fill="false"}
```{r}

# ---- Fake "today" values + baseline for jump height ----
today_vals <- tibble::tibble(
  Variable = c("Pain (0–10)", "Swelling (0–3)", "Sleep Hours", "Jump Height (cm)"),
  Score    = c(2, 1, 7.5, 32)
)

baseline_jump_cm <- 30  # <-- set your athlete's jump baseline here

# ---- Threshold logic (row-wise) ----
table_df <- today_vals |>
  rowwise() |>
  mutate(
    Status = case_when(
      Variable == "Pain (0–10)" ~ case_when(
        Score <= 2            ~ "Good",
        Score <  6            ~ "Caution",
        TRUE                  ~ "Alert"
      ),
      Variable == "Swelling (0–3)" ~ case_when(
        Score <= 1            ~ "Good",
        Score == 2            ~ "Caution",
        TRUE                  ~ "Alert"
      ),
      Variable == "Sleep Hours" ~ case_when(
        Score >= 8            ~ "Good",
        Score >= 6            ~ "Caution",
        TRUE                  ~ "Alert"
      ),
      Variable == "Jump Height (cm)" ~ {
        change <- (Score - baseline_jump_cm) / baseline_jump_cm
        if (change >= 0)        "Good"
        else if (change >= -0.05) "Caution"
        else                      "Alert"
      },
      TRUE ~ NA_character_
    ),
    Detail = case_when(
      Variable == "Jump Height (cm)" ~ {
        pct <- (Score - baseline_jump_cm) / baseline_jump_cm
        paste0(ifelse(pct >= 0, "+", ""), percent(pct, accuracy = 0.1))
      },
      TRUE ~ ""
    )
  ) |>
  ungroup()

# ---- Build gt table with conditional colors on Score ----
tab <- gt(table_df) |>
  tab_header(title = md(paste0("**Daily Monitoring — ", format(Sys.Date(), "%Y-%m-%d"), "**"))) |>
  cols_label(
    Variable = "Variable",
    Score    = "Score",
    Status   = "Status",
    Detail   = "Δ vs Baseline"
  ) |>
  fmt_number(columns = "Score", decimals = 1) |>
  ak_gt_theme3() |>
  cols_align(align = "left", columns = c(Variable)) |>
  cols_align(align = "center", columns = c(Score, Status, Detail)) |>
  # Colors for Score cell based on Status
  tab_style(
    style = list(cell_fill(color = "#e6f4ea"), cell_text(color = "#1e7e34", weight = "700")),
    locations = cells_body(columns = "Score", rows = Status == "Good")
  ) |>
  tab_style(
    style = list(cell_fill(color = "#fff7e6"), cell_text(color = "#a46900", weight = "700")),
    locations = cells_body(columns = "Score", rows = Status == "Caution")
  ) |>
  tab_style(
    style = list(cell_fill(color = "#fde8e8"), cell_text(color = "#a61b1b", weight = "700")),
    locations = cells_body(columns = "Score", rows = Status == "Alert")
  ) |>
  tab_options(
    data_row.padding = px(6),
    table_body.hlines.style = "solid",
    table_body.hlines.width = px(1)
  ) |>
  cols_hide(Status)

tab

```

```{r}
#| label: summary

# --- Example criteria for current phase ---
# op is the comparator to use for pass/fail
criteria <- tribble(
  ~test,                   ~criterion, ~op,
  "Quad Strength LSI",          0.85,  ">=",
  "Ham Strength LSI",           0.85,  ">=",
  "Single Hop LSI",             0.90,  ">=",
  "Triple Hop LSI",             0.90,  ">=",
  "Knee Flexion (deg)",          125,  ">=",
  "Extension Deficit (deg)",       0,  "<="    # 0 or less deficit passes
)

# --- Most recent athlete results (replace with your latest row) ---
latest <- tibble(
  test  = c("Quad Strength LSI","Ham Strength LSI","Single Hop LSI","Triple Hop LSI",
            "Knee Flexion (deg)","Extension Deficit (deg)"),
  value = c(0.83, 0.88, 0.92, 0.87, 128, 1)  # LSI as proportions; degrees as numbers
)

# --- Evaluate pass/fail using the operator from `criteria` ---
compare <- function(x, op, y) {
  dplyr::case_when(
    op == ">=" ~ x >= y,
    op == ">"  ~ x >  y,
    op == "<=" ~ x <= y,
    op == "<"  ~ x <  y,
    op == "==" ~ x == y,
    TRUE ~ NA
  )
}

table_df <- criteria %>%
  left_join(latest, by = "test") %>%
  mutate(pass = compare(value, op, criterion)) %>%
  # nice display columns
  mutate(
    Criterion = ifelse(grepl("LSI", test), percent(criterion, accuracy = 1), as.character(criterion)),
    Score     = ifelse(grepl("LSI", test), percent(value,     accuracy = 1), as.character(value)),
    Test      = test
  ) %>%
  select(Test, Criterion, Score, pass)

# --- Build gt table with conditional coloring on Score ---
gt(table_df) |>
  tab_header(title = md("**Phase Criteria vs Latest Scores**")) |>
  data_color(
    columns = "Score",
    colors = function(x) {
      # color by pass flag, not by numeric gradient
      ifelse(table_df$pass, "#e6f4ea", "#fde8e8")  # green-ish / red-ish backgrounds
    }
  ) |>
  tab_style(
    style = cell_text(color = ifelse(table_df$pass, "#1e7e34", "#a61b1b"), weight = "700"),
    locations = cells_body(columns = "Score")
  ) |>
  fmt_markdown(columns = everything()) |>
  # cols_align(align = "left", columns = everything()) |>
  ak_gt_theme3() |>
  tab_options(
    table_body.hlines.style = "solid",
    table_body.hlines.width = px(1),
    data_row.padding = px(6)
  )|>
  cols_hide(pass)
```
:::

## Column {width = "33%"}

### Row - Force Plates {.tabset height="50%"}

```{r}
#| label: cmj_Height
#| title: Height

p1 <- stat_summary_plot(Jumps, flight_height_tov, "#DA2D33", Jumps$flight_height_tov, "Flight Height - TOV")

p1 %>%
  layout(title = NA)

```

```{r}
#| label: RSImod
#| title: RSImod

p2 <- stat_summary_plot(Jumps, rs_imod, "dodgerblue4", Jumps$rs_imod, "RSI mod")

p2 %>%
  layout(title = NA)

```

```{r}
#| label: BA1
#| title: BA%

ba1 <- BA_plot_percent(Jumps, balng, basht, "orange", "dodgerblue3")

ba1 %>%
  layout(title = NA)

```

```{r}
#| label: BA2
#| title: BA-mag

ba2 <- BA_plot_magnitude(Jumps, sht_left, sht_right, "red", "black", Jumps$sht_left, Jumps$sht_right)

ba2 %>%
  layout(title = NA)

```

### Row - Knee Health {.tabset height="50%"}

```{r}
#| label: acl_rsi
#| title: ACL_RSI

p <- ggplot(acl_rsi_score, aes(x = date, y = score)) +
  geom_col(fill = "#D71920", alpha = 0.7 ) +
  geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Score (%)"
  ) +
  ylim(0,100)
  
  
  ggplotly(p)


```

```{r}
#| label: swelling
#| title: Swelling

swelling <- phase0 %>%
  filter(outcome_measure == "Swelling",
         side == inj_side)
 
p <- ggplot(swelling, aes(x = date, y = value)) +
  geom_col(fill = "#E1535B", alpha = 0.7 ) +
  geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Swelling (cm)"
  )

ggplotly(p)
```

```{r}
#| label: pain
#| title: Pain

p <- ggplot(wellness, aes(x = date, y = pain)) +
  geom_col(fill = "#E1535B", alpha = 0.7 ) +
  geom_smooth(method = "lm", se = FALSE, color = "black", linewidth = 1.2) +
  ak_plot_theme() +
  labs(
    x = NULL,
    y = "Pain"
  ) +
  ylim(0,10)
  
  ggplotly(p)
```

## Column {width = "33%"}

### Row - Strength {.tabset height="50%"}

```{r}
#| label: iso_quad
#| title: Quads

ba2 <- BA_plot_magnitude(iso_joint, l_quad_torque_90, r_quad_torque_90, "red", "black", iso_joint$l_quad_torque_90, iso_joint$r_quad_torque_90)

ba2 %>%
  layout(title = NA)
```

```{r}
#| label: iso_ham
#| title: Hams

ba2 <- BA_plot_magnitude(iso_joint, l_ham_torque_90, r_ham_torque_90, "red", "black", iso_joint$l_ham_torque_90, iso_joint$r_ham_torque_90)

ba2 %>%
  layout(title = NA)
```

### Row - Tabsets of tables {.tabset height="50%"}

Some Data
